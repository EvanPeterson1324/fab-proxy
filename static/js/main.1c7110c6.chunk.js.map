{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["FABCard","props","card","watermarkOptions","defaultWatermark","addCardToPrint","removeCardToPrint","React","useState","watermark","setWatermark","imgUrl","image","Card","className","Img","src","Body","Title","name","Footer","Button","variant","size","onClick","Dropdown","Toggle","id","Menu","map","option","Item","as","CardSearch","cardIdx","cardMap","setDefaultWatermark","searchTerm","setSearchTerm","queryString","trim","split","join","results","search","slice","res","ref","InputGroup","Prepend","Text","type","placeholder","value","onChange","event","target","DropdownButton","Append","title","App","lunr","this","pipeline","remove","stemmer","searchPipeline","field","cards","forEach","add","reduce","acc","_","require","cardsToPrint","setCardsToPrint","uuid","uuidv4","sortBy","cardElems","i","index","cardsCopy","splice","showSearchModal","setShowSearchModal","showHelpModal","setShowHelpModal","Container","Navbar","bg","expand","fixed","Brand","Collapse","Nav","Link","window","print","Modal","show","onHide","dialogClassName","Header","closeButton","Alert","Row","Col","length","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c7110c6.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n  Alert,\r\n  Button,\r\n  Card,\r\n  Dropdown,\r\n  DropdownButton,\r\n  Modal,\r\n  InputGroup,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Navbar,\r\n  Nav\r\n} from 'react-bootstrap';\r\nimport lunr from 'lunr';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './App.css';\r\nimport cards from './uprising.json'\r\n\r\n\r\nfunction FABCard(props) {\r\n  const { card, watermarkOptions, defaultWatermark, addCardToPrint, removeCardToPrint } = props\r\n  const [watermark, setWatermark] = React.useState(defaultWatermark);\r\n  const imgUrl = card.image;\r\n  return (\r\n    <Card className=\"fab-card\">\r\n      <Card.Img src={imgUrl} />\r\n      <div className=\"watermark\">{watermark}</div>\r\n      <Card.Body className=\"card-info no-print\">\r\n        <Card.Title>{card.name}</Card.Title>\r\n\r\n      </Card.Body>\r\n      <Card.Footer className=\"no-print\">\r\n        {addCardToPrint && (\r\n          <Button variant=\"outline-primary\" size=\"sm\" onClick={() => addCardToPrint(card)}>Add</Button>\r\n        )}\r\n        {removeCardToPrint && (\r\n          <Button variant=\"outline-danger\" size=\"sm\" onClick={() => removeCardToPrint(card)}>Remove</Button>\r\n        )}\r\n        {watermarkOptions && (\r\n          <Dropdown>\r\n            <Dropdown.Toggle variant=\"outline-secondary\" size=\"sm\" id=\"dropdown-basic\">\r\n              Watermark\r\n          </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              {watermarkOptions.map((option) => (\r\n                <Dropdown.Item key={option} as=\"button\" onClick={() => { setWatermark(option) }}>{option}</Dropdown.Item>\r\n              ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        )}\r\n      </Card.Footer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nfunction CardSearch(props) {\r\n  const { cardIdx, cardMap, addCardToPrint, defaultWatermark, setDefaultWatermark, watermarkOptions } = props\r\n  const [searchTerm, setSearchTerm] = React.useState(\"flame\");\r\n  const handleChange = event => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n  const updateWatermark = watermark => {\r\n    setDefaultWatermark(watermark)\r\n  }\r\n\r\n  const queryString = \"*\" + searchTerm.trim().split(\" \").join(\"* *\") + \"*\";\r\n  const results = searchTerm === \"\" ? [] : cardIdx.search(queryString).slice(0, 20).map((res) =>\r\n    <FABCard\r\n      key={cardMap[res.ref].id + defaultWatermark}\r\n      card={cardMap[res.ref]}\r\n      addCardToPrint={addCardToPrint}\r\n      defaultWatermark={defaultWatermark}\r\n    />\r\n  );\r\n  return (\r\n    <div className=\"card-search\">\r\n      <div className=\"card-search-header\">\r\n        <InputGroup>\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Search For Cards:</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search\"\r\n            value={searchTerm}\r\n            onChange={handleChange}\r\n          />\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Watermark</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <DropdownButton\r\n            as={InputGroup.Append}\r\n            variant=\"outline-secondary\"\r\n            title={defaultWatermark}\r\n            id=\"search-watermark-dropdown\"\r\n          >\r\n            {watermarkOptions.map((option) => (\r\n              <Dropdown.Item key={option} as=\"button\" onClick={() => { updateWatermark(option) }}>{option}</Dropdown.Item>\r\n            ))}\r\n          </DropdownButton>\r\n        </InputGroup>\r\n      </div>\r\n      <div className=\"card-results\">\r\n        {results}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const cardIdx = lunr(function () {\r\n    // NOTE: we turn of stemming so things work as we would expect, without this if we search for\r\n    //       \"twinn\", \"twinning blade\" will not show up due to it presumably be stemmed as \"twin\".\r\n    this.pipeline.remove(lunr.stemmer)\r\n    this.searchPipeline.remove(lunr.stemmer)\r\n    this.ref('identifier')\r\n    this.field('name')\r\n\r\n    cards.forEach((card) => this.add(card), this)\r\n  })\r\n\r\n  var cardMap = cards.reduce((acc, card) => {\r\n    return {\r\n      ...acc,\r\n      [card['identifier']]: card,\r\n    };\r\n  }, {});\r\n\r\n  var _ = require('lodash');\r\n  const watermarkOptions = ['Proxy', 'Missing', 'In Box']\r\n  const [defaultWatermark, setDefaultWatermark] = React.useState(watermarkOptions[0])\r\n  const [cardsToPrint, setCardsToPrint] = React.useState([])\r\n\r\n  const addCardToPrint = card => {\r\n    card = { ...card, uuid: uuidv4() }\r\n    setCardsToPrint(_.sortBy([...cardsToPrint, card], [card => card.name]))\r\n  };\r\n\r\n  const removeCardToPrint = index => {\r\n    return () => {\r\n      var cardsCopy = [...cardsToPrint];\r\n      cardsCopy.splice(index, 1);\r\n      setCardsToPrint(cardsCopy);\r\n    }\r\n  };\r\n\r\n  // TODO: I'm afraid once we allow changing watermark the key stuff might break it since the state for that\r\n  //       is currently stored in Card (I speak from a lot of ignorance).\r\n  const cardElems = cardsToPrint.map((card, i) =>\r\n    <FABCard key={card.uuid} card={card}\r\n      watermarkOptions={watermarkOptions}\r\n      defaultWatermark={defaultWatermark}\r\n      addCardToPrint={addCardToPrint}\r\n      removeCardToPrint={removeCardToPrint(i)} />\r\n  );\r\n\r\n  const [showSearchModal, setShowSearchModal] = React.useState(true);\r\n  const [showHelpModal, setShowHelpModal] = React.useState(false);\r\n  return (\r\n    <Container className=\"App\">\r\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" fixed=\"top\" className=\"no-print\">\r\n        <Navbar.Brand>FAB Proxy</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link onClick={() => setShowSearchModal(true)}>Add New Cards</Nav.Link>\r\n            <Nav.Link onClick={() => window.print()}>Print</Nav.Link>\r\n            <Nav.Link onClick={() => setShowHelpModal(true)}>Help</Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n      <Modal\r\n        show={showSearchModal}\r\n        onHide={() => setShowSearchModal(false)}\r\n        dialogClassName=\"search-modal\"\r\n        aria-labelledby=\"search-modal-title\"\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"search-modal-title\">\r\n            Search For Cards\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <CardSearch\r\n            cardIdx={cardIdx}\r\n            cardMap={cardMap}\r\n            addCardToPrint={addCardToPrint}\r\n            defaultWatermark={defaultWatermark}\r\n            setDefaultWatermark={setDefaultWatermark}\r\n            watermarkOptions={watermarkOptions}\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n      <Modal\r\n        show={showHelpModal}\r\n        onHide={() => setShowHelpModal(false)}\r\n        aria-labelledby=\"help-modal-title\"\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"help-modal-title\">\r\n            How to use FAB Proxy\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h3>Usage</h3>\r\n          <p>\r\n            Creating a set of proxy cards to print only takes a few steps:\r\n          </p>\r\n          <ol>\r\n            <li>Click \"Add New Cards\"</li>\r\n            <li>Start entering card names in the search field</li>\r\n            <li>Click \"Add\" on the cards you wish to print</li>\r\n            <li>Exit the \"Add New Cards\" modal and make any last changes to your watermarks</li>\r\n            <li>Print using your browsers print fuctionality (landscape works best)</li>\r\n            <li>Cut out proxy cards</li>\r\n            <li>Put proxies on top of other sleeved cards or as filler for missing cards in your binder</li>\r\n          </ol>\r\n          <Alert variant=\"warning\">\r\n            Please make sure to turn on 'print background colors/images/grapics' for better watermark printing.\r\n            Different browsers give it slightly different names.\r\n          </Alert>\r\n          <h3>Feedback</h3>\r\n          {/* <p>\r\n            If you have any feedback, please create a <a href=\"https://github.com/cgilling/fab-proxy/issues\">github issue</a>,\r\n            and I will try to respond within a reasonable time.\r\n          </p> */}\r\n        </Modal.Body>\r\n      </Modal>\r\n      <Row className=\"main\">\r\n        <Col>\r\n          <Alert variant=\"warning\" className=\"no-print\">\r\n            For <strong>US Letter</strong> printing in <strong>Landscape</strong> is recommended (8 cards per page).\r\n            <br />For <strong>A4</strong> printing in <strong>Portrait</strong> with reduced margins is recommended (9 cards per page).\r\n          </Alert>\r\n          <div className=\"card-list\">\r\n            {cardElems}\r\n          </div>\r\n          {cardElems.length === 0 && (\r\n            <Button onClick={() => setShowSearchModal(true)}>Add New Cards</Button>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n      <Navbar bg=\"light\" variant=\"light\" className=\"no-print\">\r\n        <Navbar.Text>Thanks to <a href=\"https://fabdb.net\">fabdb.net</a> for card lists and images.</Navbar.Text>\r\n      </Navbar>\r\n    </Container>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}